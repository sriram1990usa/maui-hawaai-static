"""
Django settings for proj project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'p6d%ec0^k+e85wtuae9a)m_=v*f^7qtbk8!v-aif)b(sey9i!-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'assets'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'proj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'proj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
#STATICFILES_DIRS = [  BASE_DIR / "assets/static/"] 
#STATIC_ROOT = 'staticfiles' 
#STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
# 
#MEDIA_URL = "/image/"
#MEDIA_ROOT = BASE_DIR
# https://testdriven.io/blog/django-static-files/
# STATIC_URL: 
# user can access static files from browser.
# default is /static/, in development mode files available 
# at http://127.0.0.1:8000/static/ eg. http://127.0.0.1:8000/static/css/main.css.

# STATIC_ROOT: 
# absolute path to directory wherefrom Django app serve staticfiles. 
# When you run the collectstatic management command, 
# it will find all static files as defined by STATICFILES_DIRS 
# and place them within a directory called staticfilesand - copy them into this directory.

# STATICFILES_DIRS: 
# defines additional locations, if any, staticfiles app looks within when run collectstatic. 
# By default, static files are stored at the app-level at <APP_NAME>/static/. 
# In our example location for local files is the static directory
# The collectstatic command will look for static files in those directories. 
# You can also tell Django to look for static files in additional locations with STATICFILES_DIRS.

# STATICFILES_STORAGE: 
# The file storage class you'd like to use, 
# which controls how the static files are stored and accessed. 
# The files are stored in the file system via StaticFilesStorage.

#STATICFILES_FINDERS: 
# defines the file finder backends to be used to automatically find static files.
# By default, the FileSystemFinder and AppDirectoriesFinder finders are used:
# FileSystemFinder - uses the STATICFILES_DIRS setting to find files.
# AppDirectoriesFinder - looks for files in"static" folder in each Django app in project.

# collectstatic is a management command that collects static files from the various locations -- 
# i.e., <APP_NAME>/static/ and the directories found in the STATICFILES_DIRS setting
#  -- and copies them to the STATIC_ROOT directory.
# findstatic helpful to use when debugging to see where a specific file comes from

# Don't put any static files in the STATIC_ROOT directory. 
# static files get copied to it automatically after running collectstatic. 
# Instead, always put them in the directories associated with the STATICFILES_DIRS setting or <APP_NAME>/static/.
# Do not use the development server in production. Use a production-grade WSGI application server instead. More on this shortly.

# When python manage.py collectstatic is run,
# the "staticfiles" directory will be created and 
# appropriate static files will be copied into it:
# eg maui-hawaai-static/staticfiles

# to find static files copied with multiple app folders
# $ python manage.py findstatic app.css
# Found 'app.css' here:
# /app1/static/app.css
# /app2/static/app.css

# Since only the first encountered file is collected, to check the source of the app.css that was copied over to the "staticfiles" directory, run:
# $ python manage.py findstatic app.css --first
# Found 'app.css' here:
# /app1/static/app.css

# Static Files in Development Mode
# DEBUG set to TRUE 
# using the staticfiles app, 
# serve up static files using Django's development server. 
# no need to run the collecstatic command.

#Typical development config:
# settings.py
# STATIC_URL = '/static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles'
# STATICFILES_DIRS = [BASE_DIR / 'static',]
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
